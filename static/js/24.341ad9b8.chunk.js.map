{"version":3,"sources":["pages/categories/Categories.js","../../../shared/components/utility/layoutWrapper.style.js","../../../shared/components/utility/layoutWrapper.js","../../../shared/assets/styles/constants.js","../../../shared/redux/sales/actionCreators.js"],"names":["styles","PageStyle","display","flexFlow","alignItems","overflow","tabsStyle","height","overflowY","outTableStyle","CategoriesPage","state","imageReady","index","val","setState","prevState","dispatch","this","props","categoryList","salesActions","categoryCards","Object","keys","map","category","key","span","loading","cover","hidden","alt","onLoad","src","actions","avatar","title","name","description","style","basicStyle","rowStyle","gutter","React","Component","connect","token","Auth","idToken","Sales","LayoutContentWrapper","styled","div","className","children","width","colStyle","marginBottom","paddingBottom","getProducts","rtdb","ref","on","snapshot","itemsSuccess","GET_PRODUCTS","error","itemsFail","getCategories","orderByChild","cats","Services","abbreviation","GET_CATEGORIES","removeItemsFromCart","data","cartData","id","amount","delete","addItemsToCart","all","product","amt","price","cost","partNum","code","unit","vendor","calcItemsToCart","value","cancelCart","toggleCheckoutModal","submitCheckoutData","newInventory","updates","child","push","update","SUBMIT_CHECKOUT_DATA","clearMessage","type","clearError","clearSuccess","clearInfo","clearAllMessages"],"mappings":"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","file":"static/js/24.341ad9b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport LayoutContentWrapper from '@iso/components/utility/layoutWrapper';\r\nimport basicStyle from '@iso/assets/styles/constants';\r\nimport { EditOutlined, EllipsisOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport * as salesActions from '@iso/redux/sales/actionCreators';\r\nimport { Card, Col, Row, Avatar } from 'antd';\r\n// import { itemExistsInAny } from '@iso/lib/helpers/ItemSearchString';\r\nimport { connect } from 'react-redux';\r\nimport Meta from 'antd/lib/card/Meta';\r\n\r\n\r\nconst styles = {\r\n    PageStyle: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap',\r\n        alignItems: 'flex-start',\r\n        overflow: 'hidden',\r\n    },\r\n    tabsStyle: {\r\n        height: '70vh', overflowY: 'scroll', overflow: 'auto'\r\n    },\r\n\r\n    outTableStyle: {\r\n        overflowY: 'scroll', overflow: 'auto', height: \"35vh\"\r\n    },\r\n};\r\n\r\n\r\n\r\n\r\nclass CategoriesPage extends React.Component {\r\n\r\n    state = {\r\n        imageReady: {},\r\n    }\r\n\r\n    imageReady = (index, val) => {\r\n        this.setState((prevState) => ({\r\n            imageReady: {\r\n                ...prevState.imageReady,\r\n                [index]: val\r\n            }\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { dispatch } = this.props;\r\n        !this.props.categoryList && dispatch(salesActions.getCategories());\r\n    }\r\n\r\n\r\n    render() {\r\n        let { categoryList } = this.props;\r\n        let categoryCards = [];\r\n        if (categoryList) {\r\n            categoryCards = Object.keys(categoryList).map((category, index) => {\r\n                return (\r\n                    <Col key={category} span={6}>\r\n                        <Card\r\n                            loading={!this.state.imageReady[index]}\r\n                            key={category}\r\n                            cover={<img\r\n                                hidden={!this.state.imageReady[index]}\r\n                                alt=\"example\"\r\n                                onLoad={() => { this.imageReady(index, true) }}\r\n                                src=\"https://www.placecage.com/c/640/480\"\r\n                            />\r\n                            }\r\n                            actions={[\r\n                                <SettingOutlined key=\"setting\" />,\r\n                                <EditOutlined key=\"edit\" />,\r\n                                <EllipsisOutlined key=\"ellipsis\" />,\r\n                            ]}\r\n                        >\r\n                            <Meta\r\n                                avatar={<Avatar src=\"https://www.placecage.com/100/50\" />}\r\n                                title={categoryList[category].name}\r\n                                description={``}\r\n                            />\r\n                        </Card>\r\n                    </Col>\r\n                )\r\n            })\r\n        }\r\n        return (\r\n            <LayoutContentWrapper style={styles.PageStyle}>\r\n                <Row style={basicStyle.rowStyle} gutter={[16, 16]}>\r\n                    {categoryCards}\r\n                </Row>\r\n            </LayoutContentWrapper>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.Auth.idToken,\r\n        categoryList: state.Sales.categoryList,\r\n        loading: state.Sales.loading,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CategoriesPage);","import styled from 'styled-components';\n\nconst LayoutContentWrapper = styled.div`\n  padding: 40px 20px;\n  display: flex;\n  flex-flow: row wrap;\n  overflow: hidden;\n\n  @media only screen and (max-width: 767px) {\n    padding: 50px 20px;\n  }\n\n  @media (max-width: 580px) {\n    padding: 15px;\n  }\n`;\n\nexport { LayoutContentWrapper };\n","import React from 'react';\nimport { LayoutContentWrapper } from './layoutWrapper.style';\n\nexport default props => (\n  <LayoutContentWrapper\n    className={\n      props.className != null\n        ? `${props.className} isoLayoutContentWrapper`\n        : 'isoLayoutContentWrapper'\n    }\n    {...props}\n  >\n    {props.children}\n  </LayoutContentWrapper>\n);\n","export const colors = {\n  blue: {\n    deep: 'rgb(0, 121, 191)',\n    light: 'lightblue',\n    lighter: '#d9fcff',\n    soft: '#E6FCFF',\n  },\n  black: '#4d4d4d',\n  shadow: 'rgba(0,0,0,0.2)',\n  grey: {\n    darker: '#C1C7D0',\n    dark: '#E2E4E6',\n    medium: '#DFE1E5',\n    N30: '#EBECF0',\n    light: '#F4F5F7',\n  },\n  green: 'rgb(185, 244, 188)',\n  white: 'white',\n  purple: 'rebeccapurple',\n  orange: '#FF991F',\n};\nexport const grid = 8;\n\nexport const borderRadius = 2;\nconst rowStyle = {\n  width: '100%',\n  display: 'flex',\n  flexFlow: 'row wrap',\n};\nconst colStyle = {\n  marginBottom: '16px',\n  paddingBottom: '5px',\n};\nconst gutter = 16;\n\nconst basicStyle = {\n  rowStyle,\n  colStyle,\n  gutter,\n};\nexport default basicStyle;\n","// import axios from \"../../config/axios-config/axios-instance\";\r\nimport actions from './actions';\r\nimport { rtdb } from \"../../library/firebase/firebase\";\r\n\r\n\r\nexport const getProducts = (token) => {\r\n    return dispatch => {\r\n        let inventory = rtdb.ref(`catStore/HeadQuarters/inventory/`);\r\n        inventory.on('value', (snapshot) => {\r\n            dispatch(actions.getProducts());\r\n            // console.log(snapshot.val());\r\n            dispatch(actions.itemsSuccess(snapshot.val(), actions.GET_PRODUCTS));\r\n        }, error => {\r\n            if (error) {\r\n                dispatch(actions.itemsFail(error, actions.GET_PRODUCTS));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport const getCategories = (token) => {\r\n    return dispatch => {\r\n        let categories = rtdb.ref(`categories/`).orderByChild('time');\r\n        categories.on('value', snapshot => {\r\n            dispatch(actions.getCategories());\r\n            // console.log(snapshot.val());\r\n            let cats = { ...snapshot.val(), Services: { abbreviation: 'Services', name: 'Services' } }\r\n            dispatch(actions.itemsSuccess(cats, actions.GET_CATEGORIES));\r\n        }, error => {\r\n            if (error) {\r\n                dispatch(actions.itemsFail(error, actions.GET_CATEGORIES));\r\n            }\r\n        });\r\n        // axios.get(`categories.json?auth=${token}&orderBy=\"time\"`)\r\n        //     .then(response => {\r\n        //         dispatch(actions.itemsSuccess(response.data, actions.GET_CATEGORIES));\r\n        //     })\r\n        //     .catch(error => {\r\n        //         dispatch(actions.ItemsFail(error, actions.GET_CATEGORIES));\r\n        //     })\r\n    }\r\n}\r\n\r\n\r\n//CART ACTIONS\r\nexport const removeItemsFromCart = (data) => {\r\n    let cartData = {\r\n        [data.id]: {\r\n            category: data.category,\r\n            amount: data.amount,\r\n            delete: data.delete,\r\n        }\r\n    }\r\n    return dispatch => {\r\n        dispatch(actions.removeItemsFromCart(cartData, data.id));\r\n    }\r\n}\r\nexport const addItemsToCart = (data) => {\r\n    let cartData = {\r\n        [data.id]: {\r\n            all: data.all,\r\n            category: data.category,\r\n            product: data.name,\r\n            amount: data.amt,\r\n            price: data.cost,\r\n            partNum: data.partNum,\r\n            code: data.code,\r\n            unit: data.unit,\r\n            vendor: data.vendor,\r\n        }\r\n    }\r\n    return dispatch => {\r\n        dispatch(actions.addItemsToCart(cartData, data.id));\r\n    }\r\n}\r\n\r\nexport const calcItemsToCart = (value, data) => {\r\n    return dispatch => {\r\n        dispatch(actions.calcItemsToCart(value, data));\r\n    }\r\n\r\n}\r\n\r\nexport const cancelCart = () => {\r\n    return dispatch => {\r\n        dispatch(getProducts());\r\n    }\r\n}\r\n\r\nexport const toggleCheckoutModal = (props) => {\r\n\r\n    return dispatch => {\r\n        dispatch(actions.toggleCheckoutModal(props));\r\n    }\r\n}\r\n\r\nexport const submitCheckoutData = (data, newInventory) => {\r\n    return dispatch => {\r\n        dispatch(actions.submitCheckoutData());\r\n        let checkoutKey = rtdb.ref().child('catOrders/').push().key;\r\n        var updates = {};\r\n        updates['/catOrders/' + checkoutKey] = data;\r\n        updates['catStore/HeadQuarters/inventory'] = newInventory;\r\n        rtdb.ref().update(updates, error => {\r\n            if (error) {\r\n                dispatch(actions.itemsFail(error, actions.SUBMIT_CHECKOUT_DATA));\r\n            } else {\r\n                dispatch(actions.itemsSuccess(\"checkout\", actions.SUBMIT_CHECKOUT_DATA));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const clearMessage = (type) => {\r\n    return dispatch => {\r\n        switch (type) {\r\n            case \"error\":\r\n                dispatch(actions.clearError());\r\n            case \"success\":\r\n                dispatch(actions.clearSuccess());\r\n            case \"info\":\r\n                dispatch(actions.clearInfo());\r\n            default:\r\n                dispatch(actions.clearAllMessages());\r\n\r\n        }\r\n    }\r\n}"],"sourceRoot":""}